/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/submariner-io/lighthouse/pkg/apis/submariner.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImportPolicyLister helps list ImportPolicies.
// All objects returned here must be treated as read-only.
type ImportPolicyLister interface {
	// List lists all ImportPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ImportPolicy, err error)
	// ImportPolicies returns an object that can list and get ImportPolicies.
	ImportPolicies(namespace string) ImportPolicyNamespaceLister
	ImportPolicyListerExpansion
}

// importPolicyLister implements the ImportPolicyLister interface.
type importPolicyLister struct {
	indexer cache.Indexer
}

// NewImportPolicyLister returns a new ImportPolicyLister.
func NewImportPolicyLister(indexer cache.Indexer) ImportPolicyLister {
	return &importPolicyLister{indexer: indexer}
}

// List lists all ImportPolicies in the indexer.
func (s *importPolicyLister) List(selector labels.Selector) (ret []*v1.ImportPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImportPolicy))
	})
	return ret, err
}

// ImportPolicies returns an object that can list and get ImportPolicies.
func (s *importPolicyLister) ImportPolicies(namespace string) ImportPolicyNamespaceLister {
	return importPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImportPolicyNamespaceLister helps list and get ImportPolicies.
// All objects returned here must be treated as read-only.
type ImportPolicyNamespaceLister interface {
	// List lists all ImportPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ImportPolicy, err error)
	// Get retrieves the ImportPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ImportPolicy, error)
	ImportPolicyNamespaceListerExpansion
}

// importPolicyNamespaceLister implements the ImportPolicyNamespaceLister
// interface.
type importPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImportPolicies in the indexer for a given namespace.
func (s importPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.ImportPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImportPolicy))
	})
	return ret, err
}

// Get retrieves the ImportPolicy from the indexer for a given namespace and name.
func (s importPolicyNamespaceLister) Get(name string) (*v1.ImportPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("importpolicy"), name)
	}
	return obj.(*v1.ImportPolicy), nil
}
